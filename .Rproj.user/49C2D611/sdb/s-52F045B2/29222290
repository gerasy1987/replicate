{
    "collab_server" : "",
    "contents" : "#' @export\n\ncreate_replication <- function(description_list,\n                               packages = NULL,\n                               project_path = NULL,\n                               data_list,\n                               function_script_path,\n                               replication_script_path,\n                               quietly = FALSE,\n                               checks = FALSE) {\n\n  # required packages\n  requireNamespace(\"plyr\", quietly = TRUE)\n  requireNamespace(\"dplyr\", quietly = TRUE)\n  requireNamespace(\"broom\", quietly = TRUE)\n  requireNamespace(\"magrittr\", quietly = TRUE)\n\n  # checks\n  if (!(class(packages) %in% c(\"NULL\", \"character\")))\n    stop(\"Packages required for replication should be specified as character vector of names.\")\n  if (!all(sapply(data_list,\n                  function(x) is.data.frame(x) | is.matrix(x))))\n    stop(\"All element of data_list should be of either data.frame or matrix class.\")\n  if (ifelse(!is.null(project_path), !dir.exists(project_path), FALSE))\n    stop(\"Project path does not exist on this machine. \",\n         \"Please check the project_path option of create_replication call.\")\n  if (!all(file.exists(paste0(project_path, c(function_script_path,\n                                              replication_script_path)))))\n    stop(\"Either function or replication calls script name provided incorrectly, \",\n         \"or do not exist in specified project directory path.\")\n\n  # check packages\n  if (!is.null(packages)) {\n    if (!quietly){\n      cat(\"Do you want to check and load packages required for replication? (Yes/No):\")\n      check_pkg <- readLines(n = 1)\n    } else {\n      check_pkg <- ifelse(checks, \"y\", \"n\")\n    }\n    if (ifelse(is.character(check_pkg),\n               !(tolower(check_pkg) %in% c(\"n\",\"no\")),\n               FALSE) ) {\n      ipak(packages, quietly = quietly)\n    } else if (!quietly) {\n      warning(\"You chose not to check that all packages required for replication are installed. \",\n              \"The replication of some of the results might not be \",\n              \"possible without required packages\")\n    }\n  }\n\n  # empty lists\n  replication <- functions_list <- table_list <- environment_list <- list()\n\n  # read data\n  for (i in 1:length(data_list))\n    environment_list[[names(data_list)[i]]] <- dplyr::as.tbl( data_list[[i]] )\n\n  replication$data <- data_list\n\n  # parse and create functions list\n  parsed_functions <- parse(file = paste0(project_path, function_script_path))\n\n  for (i in 1:length(parsed_functions)) {\n    character_call <- as.character(parsed_functions[[i]])\n    if (character_call[1] == \"<-\") {\n      functions_list[[character_call[2]]] <- paste(character_call[c(2,1,3)], collapse = \" \")\n      environment_list[[character_call[2]]] <- eval(parse(text = character_call[3]))\n    } else if (as.character(replication_functions[[i]])[1] != \"<-\") {\n      stop(paste(\"Either the function script has calls which do not create functions or\",\n                 \"some of the custom functions for replication are not named using '<-' operator.\",\n                 \"Please check the following file for one of those errors:\",\n                 paste0(project_path, function_script_path), \".\"))\n    }\n  }\n\n  replication$functions <- functions_list\n\n  parsed_replication_calls <- parse(file = paste0(project_path, replication_script_path))\n\n  for (i in 1:length(parsed_replication_calls)) {\n    character_call <- as.character(parsed_replication_calls[[i]])\n    if (character_call[1] == \"<-\") {\n      table_list[[character_call[2]]] <- paste(character_call[3], collapse = \" \")\n    } else if (as.character(replication_functions[[i]])[1] != \"<-\") {\n      stop(paste(\"Some of the calls in replication script are not using '<-' operator.\",\n                 \"Please check the following file for one of those errors:\",\n                 paste0(project_path, replication_script_path), \".\"))\n    }\n  }\n\n  replication$tables <- table_list\n\n  for (i in 1:length(description_list))\n    attr(replication, which = names(description_list)[i]) <- description_list[[i]]\n\n  study_misc <-\n    \"Miscellany:\\n\" %>%\n    add_study_description(pattern = \"^(?=.*nam)(?=.*stud).*$\",\n                          description_text = \"This is a replication of the \",\n                          collapse_pattern = \" and \",\n                          list = description_list) %>%\n    add_study_description(pattern = c(\"^(?=.*auth)(?=.*stud).*$\",\n                                      \"^(?=.*affil)(?=.*stud).*$\"),\n                          description_text = \"The original study is conducted by \",\n                          collapse_pattern = \" and \",\n                          ends_with = \". \",\n                          list = description_list,\n                          merge_by = \"from\") %>%\n    add_study_description(pattern = c(\"^(?=.*auth)(?=.*rep).*$\",\n                                      \"^(?=.*affil)(?=.*rep).*$\"),\n                          description_text = \"The replication is conducted by \",\n                          collapse_pattern = \" and \",\n                          ends_with = \".\\n\",\n                          list = description_list,\n                          merge_by = \"from\") %>%\n    add_study_description(pattern = \"^(?=.*abstract)(?=.*stud).*$\",\n                          description_text = \"\\nAbstract:\\n\",\n                          collapse_pattern = \". \",\n                          ends_with = \"\\n\",\n                          list = description_list)\n\n  technical_misc <-\n    \"\\nTechnical:\\n\" %>%\n    add_tech_description(type = \"dataset\",\n                         collapse_pattern = \", \",\n                         ends_with = \". \",\n                         list = data_list,\n                         add_stat = function(x) paste(dim(x)[1], \"obs. of\",\n                                                      dim(x)[2], \"variables\")) %>%\n    add_tech_description(type = \"custom function\",\n                         collapse_pattern = \", \",\n                         ends_with = \". \",\n                         list = functions_list,\n                         add_stat = NULL) %>%\n    add_tech_description(type = \"table replication\",\n                         collapse_pattern = \", \",\n                         ends_with = \".\",\n                         list = table_list,\n                         add_stat = NULL)\n\n  attr(replication, which = \"misc\") <- list(study = study_misc,\n                                            tech = technical_misc)\n  if (!quietly){\n    cat(\"Do you want to check that replication works? (Yes/No):\")\n    check_rep <- readLines(n = 1)\n  } else {\n    check_rep <- ifelse(checks, \"y\", \"n\")\n  }\n  if (ifelse(is.character(check_rep),\n             !(tolower(check_rep) %in% c(\"n\",\"no\")),\n             FALSE)) {\n    attach(list2env(environment_list), warn.conflicts = !quietly)\n\n    for (i in 1:length(table_list)) {\n      try(expr = eval(parse(text = table_list[[i]])), silent = TRUE)\n      if ( class(try(expr = eval(parse(text = table_list[[i]])),\n                     silent = TRUE)) == \"try-error\" & !quietly) {\n        warning(paste0(\"The check of replication of \", names(table_list)[i], \" failed.\"))\n      } else if (!quietly) {\n        cat(paste0(\"Succesfully replicated \", names(table_list)[i], \".\\n\"))\n      }\n    }\n    Sys.sleep(2)\n\n    detach(list2env(environment_list))\n  }\n\n  environment(replication) <- list2env(x = environment_list)\n\n  structure(replication, class = c(\"replication\",\"list\"))\n}\n\n#' @export\nadd_study_description <- function(starting_description,\n                                  pattern,\n                                  description_text,\n                                  collapse_pattern = \"and\",\n                                  ends_with = \". \",\n                                  list,\n                                  merge_by = NULL) {\n  if (is.null(merge_by)){\n\n    grep(pattern, names(list), ignore.case = TRUE, perl = TRUE) %>%\n    {\n      ifelse(length(.) != 0,\n             yes = paste0(starting_description, description_text,\n                          paste(list[[.]], collapse = collapse_pattern), ends_with),\n             no = paste0(starting_description, ends_with) )\n    }\n\n  } else if (!is.null(merge_by) & (length(pattern) > 1) &\n             (length(merge_by) = (length(pattern) - 1))) {\n    pattern_match <- c()\n    for (i in 1:length(pattern))\n      pattern_match <- c(pattern_match, grep(pattern[i], names(list),\n                                             ignore.case = TRUE, perl = TRUE))\n\n    j <- 1\n    out <- list[[pattern_match[j]]]\n    while (j < length(pattern_match)) {\n      out <- paste(out, merge_by, list[[pattern_match[j+1]]])\n      j <-  j + 1\n    }\n\n    ifelse(length(pattern_match) != 0,\n           yes = paste0(starting_description, description_text,\n                        paste(out, collapse = collapse_pattern), ends_with),\n           no = paste0(starting_description, ends_with) )\n  } else {\n    stop(\"There should be multiple regex patterns specified in character vector if merge_by is not NULL. Also the length of merge_by vector should be length of pattern vector minus 1.\")\n  }\n}\n\n#' @export\nadd_tech_description <- function(starting_description,\n                                 type,\n                                 collapse_pattern,\n                                 ends_with,\n                                 list,\n                                 add_stat = NULL) {\n  part1 <- paste0(starting_description,\n                  ifelse(length(list) == 1, \"There is \", \"There are \"),\n                  length(list), \" \", type,\n                  ifelse(length(list) == 1, \"\", \"s\"), \" provided: \")\n  if (!is.null(add_stat) & class(add_stat) == \"function\"){\n    part2 <-\n      paste0(paste(paste0(names(list), \" (\",\n                          sapply(list, FUN = add_stat), \")\"),\n                   collapse = collapse_pattern),\n             ends_with)\n  } else if (is.null(add_stat)) {\n    part2 <- paste0(paste(names(list), collapse = \", \"),\n                    ends_with)\n  }\n  paste0(part1, part2)\n}\n\n#' @export\nipak <- function(pkg, quietly) {\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg))\n    install.packages(new.pkg, dependencies = TRUE)\n  loaded_packages <- sapply(pkg, require, character.only = TRUE)\n  if (any(!loaded_packages))\n    stop(paste0(\"The following packages required for replication failed to load: \",\n                paste0(names(pkg)[!pkg], collapse = \", \"),\n                \". This can cause failure to replicate the study.\") )\n  if (all(loaded_packages) & !quietly)\n    cat(paste0(\"Succesfully installed and/or loaded all packages required for replication: \",\n               paste0(pkg, collapse = \", \"), \".\\n\\n\"))\n}\n\n",
    "created" : 1470242088435.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1727573101",
    "id" : "29222290",
    "lastKnownWriteTime" : 1470349939,
    "last_content_update" : 1470349939540,
    "path" : "~/Google Drive/7 - Projects/Replicate/create_replication.R",
    "project_path" : "create_replication.R",
    "properties" : {
        "chunk_rendered_width" : "650",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}